dictionary emoji_category;
void load_emojis()
{
    file emojiFile;
    if (!emojiFile.open("data/emojis/emojis.txt", "r"))
{
        alert("Emoji Loader", "Failed to open emojis.txt");
        return;
    }
    string current_category = "";
    emoji_category.clear();
    while (!emojiFile.eof)
{
        string line = "";
        string ch = emojiFile.read(1);
        while (ch != "\n" && !emojiFile.eof)
{
            line += ch;
            ch = emojiFile.read(1);
        }
        line = string_trim_sides(line);
        if (line.length() == 0) continue;
        if (string_starts_with(line, "[") && string_ends_with(line, "]"))
{
            current_category = line.substr(1, line.length() - 2);
        }
else if (current_category != "")
{
            if (!emoji_category.exists(current_category))
                emoji_category[current_category] = line + "\n";
            else
                emoji_category[current_category] = string(emoji_category[current_category]) + line + "\n";
        }
    }
    emojiFile.close();
}
void save_emojis()
{
    file emojiFile;
    if (!emojiFile.open("data/emojis/emojis.txt", "w"))
{
        alert("Emoji Saver", "Failed to write to emojis.txt");
        return;
    }
    array<string> keys = emoji_category.get_keys();
    keys.sort_ascending();
    for (uint i = 0; i < keys.length(); i++)
{
        string category = keys[i];
        emojiFile.write("[" + category + "]\r\n");
        string data = string(emoji_category[category]);
        array<string> lines = data.split("\n");
        for (uint j = 0; j < lines.length(); j++)
{
            string trimmed = string_trim_sides(lines[j]);
            if (trimmed.length() > 0)
                emojiFile.write(trimmed + "\r\n");
        }
        emojiFile.write("\r\n");
    }
    emojiFile.close();
}
