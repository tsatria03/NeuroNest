void notewriter()
{
form.reset();
form.create_window("NeuroNest", false);
int newdock=form.create_button("Create &note");
int opdock=form.create_button("&Load note");
int quit=form.create_button("&Close app");
form.focus(newdock);
while(true)
{
wait(5);
key_echo_themecheck(form);
form.monitor();
if (key_pressed(KEY_ESCAPE) || form.is_pressed(quit))
{
if (yes_no("Are you sure you want to close the app?"))
{
speak("exiting");
wait(500);
exit();
}
else
{
notewriter();
}
}
if(form.is_pressed(newdock))
{
    if (yes_no("Would you like to create an untitled note?"))
    {
        string fullpath = "data/notes/untitled.txt";
        if (file_exists(fullpath))
        {
alert("Error", "A note with that name already exists. Please delete or rename the note first.");
            wait(500);
            notewriter();
        }
        else
        {
            file f;
            if (f.open(fullpath, "wb"))
            {
                f.write("");
                f.close();
                notename = fullpath;
                notetext = "";
                alert("Note created", "Note created at " + fullpath);
                wait(500);
                note_editor();
            }
            else
            {
                alert("Error", "Could not create untitled note.");
                wait(500);
                notewriter();
            }
        }
    }
    else
    {
        vd.set_disallowed_chars("!@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
        string nm = vd.input_box("", "Enter the custom title of this note.");
        if (!nm.empty())
        {
            string fullpath = "data/notes/" + nm + ".txt";
            if (file_exists(fullpath))
            {
                alert("Error", "A note with that name already exists. Please try a different name.");
                wait(500);
                notewriter();
            }
            else
            {
                file f;
                if (f.open(fullpath, "wb"))
                {
                    f.write("");
                    f.close();
                    notename = fullpath;
                    notetext = "";
                    alert("Note created", "Note created at " + notename);
                    wait(500);
                    note_editor();
                }
                else
                {
                    alert("Error", "Could not create the note at " + fullpath);
                    wait(500);
                    notewriter();
                }
            }
        }
    }
}
if(form.is_pressed(opdock))
{
string[] files = find_files("data/notes/*.txt");
if (files.length() == 0)
{
alert("No notes found", "There are no notes located in data/notes.");
wait(500);
notewriter();
}
else
{
setupmenu();
array<string> displayNames;
for (uint i = 0; i < files.length(); i++)
{
string filename = files[i];
m.add_item(filename);
displayNames.insert_last(filename);
}
m.add_item("Back");
m.intro_text = "Select a note to open.";
int choice = m.run();
if (choice >= 0 && choice < int(files.length()))
{
string path = "data/notes/" + displayNames[choice];
file f;
if (f.open(path, "rb"))
{
notetext = f.read();
f.close();
notename = path;
alert("Note loaded", "Opened " + string_replace(notename, "data/notes/", "", true));
wait(500);
note_editor();
}
else
{
alert("Error", "Failed to read the note at " + path);
wait(500);
notewriter();
}
}
else
{
notewriter();
}
}
}
}
}
void note_editor()
{
form.reset();
form.create_window("note editor", false);
int dockbox = form.create_input_box("&Note text for "+string_replace(notename, "data/notes/", "", true), notetext, read_only:false, multiline:true, multiline_enter:true);
int infdock=form.create_button("Note &info");
int emodock = form.create_button("Add &Emoticon");
int dlgdock = form.create_button("Change dialog &theme");
int deldock=form.create_button("&Delete note");
int opdock=form.create_button("&Load note");
int viewdock=form.create_button("&Read note");
int rendock=form.create_button("Rena&me note");
int savdock=form.create_button("&Save note");
int savdock2=form.create_button("Save note &as");
int quit=form.create_button("&Close note");
form.focus(dockbox);
while(true)
{
wait(5);
key_echo_themecheck(form);
form.monitor();
notetext=form.get_text(dockbox);
if (key_repeating(KEY_ESCAPE) || form.is_pressed(quit))
{
setupmenu();
m.add_items({"Yes, save it", "No, discard it", "Cancel"});
m.intro_text = "Do you want to save this note before closing it?";
int choice = m.run();
if (choice == 0)
{
file f;
if (f.open(notename, "wb"))
{
f.write(notetext);
f.close();
alert("Saved", "Note saved to " + notename);
}
else
{
alert("Error", "Could not save the note.");
}
wait(500);
notewriter();
}
else if (choice == 1)
{
notewriter();
}
else
{
form.focus(dockbox);
}
}
if (form.is_pressed(dlgdock))
{
    array<string> themes = find_directories("sounds/dialogs/*");
    if (themes.length() == 0)
    {
        alert("No themes found", "There are no dialog sound themes in the sounds/dialogs folder.");
        wait(500);
form.focus(dlgdock);
    }
    else
    {
        setupmenu();
        themes.sort_ascending();
        for (uint i = 0; i < themes.length(); i++)
        {
            if (themes[i] == dlgtheme)
                m.add_item(themes[i] + ": Active");
            else
                m.add_item(themes[i]);
        }
        m.add_item("Back");
        m.intro_text = "Choose a dialog sound theme.";
        int choice = m.run();
        if (choice >= 0 && choice < int(themes.length()))
        {
            dlgtheme = themes[choice];
writepreffs();
            alert("Success", "Dlg theme set to " + dlgtheme);
        }
wait(500);
form.focus(dlgdock);
    }
}
if (form.is_pressed(infdock))
{
notetext=form.get_text(dockbox);
alert("Note Stats for "+string_replace(notename, "data/notes/", "", true), get_note_charlines(notetext));
wait(500);
form.focus(dockbox);
}
if (form.is_pressed(viewdock))
{
notetext=form.get_text(dockbox);
if(notetext.length()==0)
{
alert("Error", "There's nothing written in this note.");
wait(500);
form.focus(dockbox);
}
else
{
dlgmessage(notetext);
wait(500);
form.focus(viewdock);
}
}
if (form.is_pressed(emodock))
{
    array<string> keys = emoji_category.get_keys();
    if (keys.length() == 0)
    {
        alert("No emojis loaded", "Please make sure emojis have been parsed and loaded.");
        wait(500);
        form.focus(dockbox);
    }
    array<string> allEmojiLines;
    dictionary emojiSeen;
    for (uint i = 0; i < keys.length(); i++)
    {
        string data = string(emoji_category[keys[i]]);
        array<string> lines = data.split("\n");
        for (uint j = 0; j < lines.length(); j++)
        {
            string trimmed = string_trim_sides(lines[j]);
            if (trimmed == "") continue;
            int spaceIndex = trimmed.find(" ");
            if (spaceIndex == -1) continue;
            string emojiChar = string_left(trimmed, spaceIndex);
            if (!emojiSeen.exists(emojiChar))
            {
                emojiSeen[emojiChar] = "true";
                allEmojiLines.insert_last(trimmed);
            }
        }
    }
    keys.sort_ascending();
keys.insert_at(0, "All Emojis");
    setupmenu();
    for (uint i = 0; i < keys.length(); i++)
    {
        string category = keys[i];
        int emojiCount = 0;
        if (category == "All Emojis")
            emojiCount = allEmojiLines.length();
        else
        {
            string data = string(emoji_category[category]);
            array<string> lines = data.split("\n");
            for (uint j = 0; j < lines.length(); j++)
            {
                if (string_trim_sides(lines[j]) != "") emojiCount++;
            }
        }
string label = category;
        m.add_item(label + ". There are " + string(emojiCount) + " emojis in this category.");
    }
    m.add_item("Back");
    m.intro_text = "Select an emoji category.";
    int categoryChoice = m.run();
    if (categoryChoice == -1 || categoryChoice >= int(keys.length()))
    {
        form.focus(dockbox);
        return;
    }
    string selectedCategory = keys[categoryChoice];
    array<string> lines;
    if (selectedCategory == "All Emojis")
        lines = allEmojiLines;
    else
        lines = string(emoji_category[selectedCategory]).split("\n");
    array<string> displayList;
    array<string> emojiOnlyList;
    for (uint i = 0; i < lines.length(); i++)
    {
        string trimmed = string_trim_sides(lines[i]);
        if (trimmed == "") continue;
        int spaceIndex = trimmed.find(" ");
        if (spaceIndex > 0)
        {
            string emojiChar = string_left(trimmed, spaceIndex);
            string label = string_trim_left(trimmed, spaceIndex + 1);
            displayList.insert_last(label);
            emojiOnlyList.insert_last(emojiChar);
        }
    }
    for (uint i = 0; i < displayList.length(); i++)
    {
        for (uint j = i + 1; j < displayList.length(); j++)
        {
            if (displayList[j] < displayList[i])
            {
                string tmpDisplay = displayList[i];
                displayList[i] = displayList[j];
                displayList[j] = tmpDisplay;
                string tmpEmoji = emojiOnlyList[i];
                emojiOnlyList[i] = emojiOnlyList[j];
                emojiOnlyList[j] = tmpEmoji;
            }
        }
    }
    if (displayList.length() == 0)
    {
        alert("No emojis", "There are no emojis in this category.");
        wait(500);
        form.focus(dockbox);
    }
    else
    {
        setupmenu();
        for (uint i = 0; i < displayList.length(); i++)
        {
            m.add_item(displayList[i]);
        }
        m.add_item("Back");
        m.intro_text = (selectedCategory == "__ALL__" ? "All Emojis" : selectedCategory) + " menu. Choose an emoji to copy.";
        int emojiChoice = m.run();
        if (emojiChoice == -1 || emojiChoice >= int(displayList.length()))
        {
            form.focus(dockbox);
        }
        else
        {
            string chosenEmoji = emojiOnlyList[emojiChoice];
            clipboard_copy_text(chosenEmoji);
            alert("Copied", "The " + chosenEmoji + " emoji has been copied to your clipboard!");
            wait(500);
            form.focus(dockbox);
        }
    }
}
if (form.is_pressed(deldock))
{
    if (yes_no("Are you sure you want to permanently delete this note? This cannot be undone."))
    {
        if (file_exists(notename))
        {
            if (file_delete(notename))
            {
                alert("Deleted", "The note has been deleted.");
                wait(500);
                notewriter();
            }
            else
            {
                alert("Error", "Failed to delete the note.");
                wait(500);
                form.focus(dockbox);
            }
        }
        else
        {
            alert("Error", "The note does not exist.");
            wait(500);
            form.focus(dockbox);
        }
    }
    else
    {
        form.focus(dockbox);
    }
}
if(form.is_pressed(opdock))
{
setupmenu();
m.add_items({"Yes, save it", "No, discard it", "Cancel"});
m.intro_text = "Do you want to save your current note before opening another one?";
int choice = m.run();
bool shouldOpenNew = false;
if (choice == 0)
{
file f;
if (f.open(notename, "wb"))
{
f.write(notetext);
f.close();
alert("Saved", "Note saved to " + notename);
wait(500);
shouldOpenNew = true;
}
else
{
alert("Error", "Could not save the note.");
wait(500);
form.focus(dockbox);
}
}
else if (choice == 1)
{
shouldOpenNew = true;
}
else
{
form.focus(dockbox);
}
if (shouldOpenNew)
{
string[] files = find_files("data/notes/*.txt");
if (files.length() == 0)
{
alert("No notes found", "There are no notes located in data/notes.");
wait(500);
form.focus(dockbox);
}
else
{
setupmenu();
array<string> displayNames;
for (uint i = 0; i < files.length(); i++)
{
string filename = files[i];
m.add_item(filename);
displayNames.insert_last(filename);
}
m.add_item("Back");
m.intro_text = "Select a note to open.";
int fileChoice = m.run();
if (fileChoice >= 0 && fileChoice < int(files.length()))
{
string path = "data/notes/" + displayNames[fileChoice];
file f;
if (f.open(path, "rb"))
{
notetext = f.read();
f.close();
notename = path;
alert("Note loaded", "Opened " + string_replace(notename, "data/notes/", "", true));
wait(500);
note_editor();
}
else
{
alert("Error", "Failed to read the note at " + path);
wait(500);
form.focus(dockbox);
}
}
else
{
form.focus(dockbox);
}
}
}
}
if (form.is_pressed(rendock))
{
vd.set_disallowed_chars("!@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string newname = vd.input_box("", "Enter a new name for this note.");
if (!newname.empty())
{
string newpath = "data/notes/" + newname + ".txt";
if (file_exists(newpath))
{
alert("Error", "A note with that name already exists.");
wait(500);
form.focus(dockbox);
}
else
{
string contents = get_file_contents(notename);
if (contents == "")
{
alert("Error", "Could not read from the original note.");
wait(500);
form.focus(dockbox);
}
if (put_file_contents(newpath, contents))
{
if (file_delete(notename))
{
notename = newpath;
alert("Success", "Note renamed to " + newname + ".txt");
wait(500);
form.focus(dockbox);
}
else
{
alert("Partial success", "Copied to new note, but failed to delete original.");
wait(500);
form.focus(dockbox);
}
}
else
{
alert("Error", "Failed to write the new note.");
wait(500);
form.focus(dockbox);
}
}
}
}
if(form.is_pressed(savdock))
{
file f;
if (f.open(notename, "wb"))
{
f.write(notetext);
f.close();
alert("Saved", "Note saved to " + notename);
wait(500);
form.focus(dockbox);
}
else
{
alert("Error", "Could not save the note.");
wait(500);
form.focus(dockbox);
}
}
if (form.is_pressed(savdock2))
{
string newpath = save_file_dialog("Text Files:txt", "data/notes/");
if (!newpath.empty())
{
if (!newpath.lower().ends_with(".txt"))
newpath += ".txt";
file f;
if (f.open(newpath, "wb"))
{
f.write(notetext);
f.close();
notename = newpath;
alert("Saved", "Note saved as " + notename);
wait(500);
form.focus(dockbox);
}
else
{
alert("Error", "Could not save the note.");
wait(500);
form.focus(dockbox);
}
}
}
}
}
