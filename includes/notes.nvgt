void notewriter()
{
form.reset();
form.create_window("NeuroNest", false);
int newdock=form.create_button("Create &note");
int opdock=form.create_button("&Load note");
int quit=form.create_button("&Close app");
form.focus(newdock);
while(true)
{
wait(5);
key_echocheck(form);
form.monitor();
if (key_repeating(KEY_F1) && keyboardthemes.length() > 0)
{
keyboardthemes.sort(natural_number_sort);
current_theme_index = (current_theme_index + 1) % keyboardthemes.length();
keyboardtheme = keyboardthemes[current_theme_index];
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*change*"),false,0,0,-5,100,false);
speak(keyboardtheme);
}
if (key_repeating(KEY_F4))
{
if(themesound==true)
{
themesound=false;
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*disable*"),false,0,0,-5,100,false);
speak("Typing sounds disabled.");
}
else
{
themesound=true;
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*enable*"),false,0,0,-5,100,false);
speak("Typing sounds enabled.");
}
}
if (key_pressed(KEY_ESCAPE) || form.is_pressed(quit))
{
if (yes_no("Are you sure you want to close the app?"))
exit();
else
notewriter();
}
if(form.is_pressed(newdock))
{
vd.set_disallowed_chars("!@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string nm=vd.input_box("", "Enter the title of this note.");
if (!nm.empty())
{
string fullpath = "data/notes/" + nm + ".txt";
file f;
if (f.open(fullpath, "wb"))
{
f.write("");
f.close();
notename = fullpath;
notetext = "";
alert("Note created", "Note created at " + notename);
wait(500);
note_editor();
}
else
{
alert("Error", "Could not create the note: " + fullpath);
wait(500);
notewriter();
}
}
}
if(form.is_pressed(opdock))
{
string path = open_file_dialog("Text Files:txt", "data/notes/");
if (!path.empty())
{
file f;
if (f.open(path, "rb"))
{
notetext = f.read();
f.close();
notename = path;
alert("Note loaded", "Opened " + notename);
wait(500);
note_editor();
}
else
{
alert("Error", "Failed to read the note.");
wait(500);
notewriter();
}
}
}
}
}
void note_editor()
{
form.reset();
form.create_window("note editor", false);
int dockbox = form.create_input_box("&Note text area", notetext, read_only:false, multiline:true, multiline_enter:true);
int infdock=form.create_button("Note &info");
int opdock=form.create_button("&Load note");
int rendock=form.create_button("&Rename note");
int savdock=form.create_button("&Save note");
int savdock2=form.create_button("Save note &as");
int quit=form.create_button("&Close note");
form.focus(dockbox);
while(true)
{
wait(5);
key_echocheck(form);
form.monitor();
notetext=form.get_text(dockbox);
if (key_repeating(KEY_F1) && keyboardthemes.length() > 0)
{
keyboardthemes.sort(natural_number_sort);
current_theme_index = (current_theme_index + 1) % keyboardthemes.length();
keyboardtheme = keyboardthemes[current_theme_index];
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*change*"),false,0,0,-5,100,false);
speak(keyboardtheme);
}
if (key_repeating(KEY_F4))
{
if(themesound==true)
{
themesound=false;
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*disable*"),false,0,0,-5,100,false);
speak("Typing sounds disabled.");
}
else
{
themesound=true;
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*enable*"),false,0,0,-5,100,false);
speak("Typing sounds enabled.");
}
}
if (key_pressed(KEY_ESCAPE) || form.is_pressed(quit))
{
if (yes_no("Are you sure you want to close this note? Unsaved changes will be lost."))
notewriter();
else
form.focus(dockbox);
}
if (form.is_pressed(infdock))
{
notetext=form.get_text(dockbox);
alert("Note Stats", get_note_charlines(notetext));
wait(500);
form.focus(dockbox);
}
if(form.is_pressed(opdock))
{
string path = open_file_dialog("Text Files:txt", "data/notes/");
if (!path.empty())
{
file f;
if (f.open(path, "rb"))
{
notetext = f.read();
f.close();
notename = path;
alert("Note loaded", "Opened " + notename);
wait(500);
note_editor();
}
else
{
alert("Error", "Failed to read the note.");
wait(500);
form.focus(dockbox);
}
}
}
if (form.is_pressed(rendock))
{
vd.set_disallowed_chars("!@#$%^&*()[]{};:'\"\\|,.<>?/+-=`~", false, "This character is not allowed.");
string newname = vd.input_box("", "Enter a new name for this note.");
if (!newname.empty())
{
string newpath = "data/notes/" + newname + ".txt";
if (file_exists(newpath))
{
alert("Error", "A note with that name already exists.");
wait(500);
form.focus(dockbox);
}
else
{
string contents = get_file_contents(notename);
if (contents == "")
{
alert("Error", "Could not read from the original note.");
wait(500);
form.focus(dockbox);
}
if (put_file_contents(newpath, contents))
{
if (file_delete(notename))
{
notename = newpath;
alert("Success", "Note renamed to: " + newname + ".txt");
wait(500);
form.focus(dockbox);
}
else
{
alert("Partial success", "Copied to new note, but failed to delete original.");
wait(500);
form.focus(dockbox);
}
}
else
{
alert("Error", "Failed to write the new note.");
wait(500);
form.focus(dockbox);
}
}
}
}
if(form.is_pressed(savdock))
{
file f;
if (f.open(notename, "wb"))
{
f.write(notetext);
f.close();
alert("Saved", "Note saved to " + notename);
wait(500);
form.focus(dockbox);
}
else
{
alert("Error", "Could not save the note.");
wait(500);
form.focus(dockbox);
}
}
if (form.is_pressed(savdock2))
{
string newpath = save_file_dialog("Text Files:txt", "data/notes/");
if (!newpath.empty())
{
if (!newpath.lower().ends_with(".txt"))
newpath += ".txt";
file f;
if (f.open(newpath, "wb"))
{
f.write(notetext);
f.close();
notename = newpath;
alert("Saved", "Note saved as " + notename);
wait(500);
form.focus(dockbox);
}
else
{
alert("Error", "Could not save the note.");
wait(500);
form.focus(dockbox);
}
}
}
}
}
