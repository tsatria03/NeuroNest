bool alt_is_down()
{
if(key_down(KEY_LMENU) or key_down(KEY_RMENU))
{
return true;
}
return false;
}
bool control_is_down()
{
if(key_down(KEY_LCONTROL) or key_down(KEY_RCONTROL))
{
return true;
}
return false;
}
bool shift_is_down()
{
if(key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
return true;
}
return false;
}
bool int_to_bool(int i)
{
return i==1? true:false;
}
bool string_starts_with(const string& in str, const string& in start)
{
if (str.length()>=start.length())
{
return (str.substr(0, start.length()) == start);
}
return false;
}
bool string_ends_with(const string& in str,const string& in ending)
{
if (str.length()>=ending.length())
{
return (str.substr(str.length()-ending.length())==ending);
}
return false;
}
double clamp(double value, double min, double max)
{
value=value<min? min:value;
value=value>max? max:value;
return value;
}
double min(double a, double b)
{
return (a < b) ? a : b;
}
double max(double a, double b)
{
return (a > b) ? a : b;
}
int bool_to_int(bool b)
{
return b? 1:0;
}
string find_sound(string soundname)
{
string[] snd=find_files(soundname);
if (snd.length()>0)
{
string[] a_path=string_split(soundname,"/");
string path=string_replace(soundname,a_path[a_path.length()-1],"",true);
return path+snd[random(0,snd.length()-1)];
}
else
return "";
}
string get_note_charlines(const string& in text)
{
int characters = text.length();
int lines = 0;
if (!text.empty())
{
string[] lineSplit = string_split(text, "\n");
for (uint i = 0; i < lineSplit.length(); i++)
{
string trimmedLine = strip_text(lineSplit[i]);
if (!trimmedLine.empty())
lines++;
}
}
return "Characters written: " + characters + ". Lines written: " + lines + ".";
}
string strip_text(const string& in text)
{
string cleaned = text;
cleaned.replace("\t", " ");
cleaned.replace("\r", "");
cleaned = string_trim_sides(cleaned);
regexp re(" +");
cleaned = re.subst(cleaned, " ");
return cleaned;
}
string string_trim_sides(const string& in str)
{
string result=str;
while (result.length()>0 && (result[0]==" "||result[0]=="\t"||result[0]=="\r"||result[0]=="\n"))
{
result=string_trim_left(result,1);
}
while (result.length()>0 && (result[result.length()-1]==" "||result[result.length()-1]=="\t"||result[result.length()-1]=="\r"||result[result.length()-1]=="\n"))
{
result=string_trim_right(result,1);
}
return result;
}
string random_string(string[] array)
{
string retval=array[random(0,array.length()-1)];
return retval;
}
string strip_extension(string filename)
{
    int dotIndex = filename.rfind(".");
    if (dotIndex != -1)
    {
        return filename.substr(0, dotIndex);
    }
    return filename;
}
string strip_directory(string path)
{
    int lastSlash = path.rfind("/");
    if (lastSlash == -1)
        lastSlash = path.rfind("\\");
    if (lastSlash != -1)
        return path.substr(lastSlash + 1);
    return path;
}
string[] list_folders(string path)
{
return find_directories(path + "*");
}
string get_key_echo_description(int mode)
{
if (mode==textflag_none)
return "echo off";
else if (mode==textflag_characters)
return "echo characters";
else if (mode==textflag_words)
return "echo words";
else if (mode==textflag_characters_words)
return "echo both characters and words";
return "";
}
void key_echo_themecheck(audio_form@ form)
{
if(form.get_control_type(form.get_current_focus())==ct_input)
{
if (key_repeating(KEY_F1) && keyboardthemes.length() > 0)
{
keyboardthemes.sort(natural_number_sort);
current_theme_index = (current_theme_index + 1) % keyboardthemes.length();
keyboardtheme = keyboardthemes[current_theme_index];
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*change*"),false,0,0,-5,100,false);
speak(keyboardtheme);
}
if (key_pressed(KEY_F2))
{
echomode++;
if (echomode>3) echomode=0;
form.set_default_keyboard_echo(echomode);
writepreffs();
speak(get_key_echo_description(echomode));
}
if (key_repeating(KEY_F4))
{
if(themesound==true)
{
themesound=false;
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*disable*"),false,0,0,-5,100,false);
speak("Typing sounds disabled.");
}
else
{
themesound=true;
writepreffs();
spool.destroy_sound(themeslot);
themeslot=spool.play_stationary_extended(find_sound("sounds/typing themes/"+keyboardtheme+"/*enable*"),false,0,0,-5,100,false);
speak("Typing sounds enabled.");
}
}
}
}
