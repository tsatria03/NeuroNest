#include"includes/includes.nvgt"
int echomode=1;
int current_theme_index = 0;
string dlgtype="dialog";
string[] keyboardthemes;
string keyboardtheme="keyboard";
string filename;
string filetext;
string version;
file dockver;
instance appstence("nt");
audio_form form;
sound_pool p, spool, temp;
savedata st("data/preffs/options.dat","F3Jua5qKnJADtZH94CKSUxVr7kAl3BCW6D4MlajEwWb3JUVDXq7HYT79zD18XMco8f1VDE6SNnjB3ApdUIb4mDd5DSxYAw8KiI9tZAEURDwExxEUZnTIRdHs2kBCujq6CM0Zt9awIZO08HSiGMpvKv78MYR4oeb4N8pzLE7nltqeobTsFCdtgFC9TPXOyGX82SmyxlTuPzJYeZSmCVI2VsLsq0YRZXjBGXnWyTRIobbc7v0oSUPCB6EjK3V1B6B6RNA2rhreNZB2K5RHSMfU1m0IjLu5CNppbKNQaxzfnRWcOVtQFdlOCIqEhUSi4jraN1C11zMSp8bD4ciOe2uOgq72s1jfzWxzDEHSzGjz2TvS");
virtual_dialogs vd;
void readpreffs()
{
st.load();
if(st.d.exists("dlgtype"))
{
dlgtype=st.read_string("dlgtype");
}
if(st.d.exists("echomode"))
{
echomode=st.read_number("echomode");
form.set_default_keyboard_echo(echomode);
}
if(st.d.exists("keyboardtheme"))
{
keyboardtheme=st.read_string("keyboardtheme");
for (uint i = 0; i < keyboardthemes.length(); i++)
{
if (keyboardthemes[i] == keyboardtheme)
{
current_theme_index = i;
break;
}
}
}
}
void writepreffs()
{
st.add("dlgtype",dlgtype);
st.add("echomode",echomode);
st.add("keyboardtheme",keyboardtheme);
st.save();
}
void main()
{
if (!directory_exists("data/preffs")) directory_create("data/preffs");
if (!directory_exists("data/notes")) directory_create("data/notes");
readpreffs();
keyboardthemes = list_folders("sounds/typing themes/");
if (keyboardthemes.length() > 0)
{
bool found_theme = false;
for (uint i = 0; i < keyboardthemes.length(); i++)
{
if (keyboardthemes[i] == keyboardtheme)
{
current_theme_index = i;
found_theme = true;
break;
}
}
if (!found_theme)
{
keyboardtheme = keyboardthemes[0];
current_theme_index = 0;
}
}
else
{
alert("No keyboard themes found!", "Make sure folders are in: sounds/typing themes/");
}
getver();
show_window("NeuroNest, version "+version);
if(appstence.is_already_running)
{
alert("error", "You can only have one instence of this app running!");
exit();
}
else
{
    notewriter();
}
}
void notewriter()
{
form.reset();
form.create_window("NeuroNest", false);
int newdock=form.create_button("Create file");
int opdock=form.create_button("Load file");
int quit=form.create_button("Quit app");
form.focus(newdock);
while(true)
{
wait(5);
key_echocheck(form);
form.monitor();
if(key_pressed(KEY_ESCAPE) || form.is_pressed(quit))
{
exit();
}
if(form.is_pressed(newdock))
{
vd.set_disallowed_chars("!@#$%^&*()[]{};:'\"\\|,.<>?/+=`~", false, "This character is not allowed.");
string fn=vd.input_box("","Enter the name of this file.");
if (!fn.empty())
{
string fullpath = "data/notes/" + fn + ".txt";
file f;
if (f.open(fullpath, "wb"))
{
f.write("");
f.close();
filename = fullpath;
filetext = "";
alert("Note created", "Empty note created at: " + filename);
wait(500);
note_editor();
}
else
{
alert("Error", "Could not create the file: " + fullpath);
wait(500);
notewriter();
}
}
}
if(form.is_pressed(opdock))
{
string path = open_file_dialog("Text Files:txt", "data/notes/");
if (!path.empty())
{
file f;
if (f.open(path, "rb"))
{
filetext = f.read();
f.close();
filename = path;
alert("Note loaded", "Opened: " + filename);
wait(500);
note_editor();
}
else
{
alert("Error", "Failed to read the file.");
wait(500);
notewriter();
}
}
}
}
}
void note_editor()
{
form.reset();
form.create_window("note editor", false);
int dockbox = form.create_input_box("Text area", filetext, read_only:false, multiline:true, multiline_enter:true);
int opdock=form.create_button("Load file");
int savdock=form.create_button("Save file");
int savdock2=form.create_button("Save file as");
int quit=form.create_button("Close file");
form.focus(dockbox);
while(true)
{
wait(5);
key_echocheck(form);
form.monitor();
filetext=form.get_text(dockbox);
if (key_repeating(KEY_F1) && keyboardthemes.length() > 0)
{
current_theme_index = (current_theme_index + 1) % keyboardthemes.length();
writepreffs();
keyboardtheme = keyboardthemes[current_theme_index];
speak(keyboardtheme);
}
if(key_pressed(KEY_ESCAPE) || form.is_pressed(quit))
{
notewriter();
}
if(form.is_pressed(savdock))
{
file f;
if (f.open(filename, "wb"))
{
f.write(filetext);
f.close();
alert("Saved", "File saved: " + filename);
}
else
{
alert("Error", "Could not save the file.");
}
}
if (form.is_pressed(savdock2))
{
string newpath = save_file_dialog("Text Files:txt", "data/notes/");
if (!newpath.empty())
{
if (!newpath.lower().ends_with(".txt"))
newpath += ".txt";
file f;
if (f.open(newpath, "wb"))
{
f.write(filetext);
f.close();
filename = newpath;
alert("Saved", "File saved as: " + filename);
}
else
{
alert("Error", "Could not save the file.");
}
}
}
if(form.is_pressed(opdock))
{
string path = open_file_dialog("Text Files:txt", "data/notes/");
if (!path.empty())
{
file f;
if (f.open(path, "rb"))
{
filetext = f.read();
f.close();
filename = path;
alert("Note loaded", "Opened: " + filename);
wait(500);
note_editor();
}
else
{
alert("Error", "Failed to read the file.");
wait(500);
note_editor();
}
}
}
}
}
