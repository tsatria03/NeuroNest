#include"includes/includes.nvgt"
int themeslot;
int echomode=1;
int current_theme_index = 0;
string keyboardtheme="keyboard";
string[] keyboardthemes;
string notename;
string notetext;
string version;
file dockver;
instance appstence("nt");
audio_form form;
sound_pool p, spool, temp;
savedata st("data/preffs/options.dat","F3Jua5qKnJADtZH94CKSUxVr7kAl3BCW6D4MlajEwWb3JUVDXq7HYT79zD18XMco8f1VDE6SNnjB3ApdUIb4mDd5DSxYAw8KiI9tZAEURDwExxEUZnTIRdHs2kBCujq6CM0Zt9awIZO08HSiGMpvKv78MYR4oeb4N8pzLE7nltqeobTsFCdtgFC9TPXOyGX82SmyxlTuPzJYeZSmCVI2VsLsq0YRZXjBGXnWyTRIobbc7v0oSUPCB6EjK3V1B6B6RNA2rhreNZB2K5RHSMfU1m0IjLu5CNppbKNQaxzfnRWcOVtQFdlOCIqEhUSi4jraN1C11zMSp8bD4ciOe2uOgq72s1jfzWxzDEHSzGjz2TvS");
virtual_dialogs vd;
void main()
{
if (!directory_exists("data/preffs")) directory_create("data/preffs");
if (!directory_exists("data/notes")) directory_create("data/notes");
readpreffs();
keyboardthemes = list_folders("sounds/typing themes/");
keyboardthemes.sort(natural_number_sort);
if (keyboardthemes.length() > 0)
{
bool found_theme = false;
for (uint i = 0; i < keyboardthemes.length(); i++)
{
if (keyboardthemes[i] == keyboardtheme)
{
current_theme_index = i;
found_theme = true;
break;
}
}
if (!found_theme)
{
keyboardtheme = keyboardthemes[0];
current_theme_index = 0;
}
}
else
{
alert("No keyboard themes found!", "Make sure folders are in: sounds/typing themes/");
}
getver();
show_window("NeuroNest, version "+version);
if(appstence.is_already_running)
{
alert("error", "You can only have one instence of this app running!");
exit();
}
else
{
wait(500);
    notewriter();
}
}
